// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bugreport.proto

#ifndef PROTOBUF_bugreport_2eproto__INCLUDED
#define PROTOBUF_bugreport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_bugreport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsReportImpl();
void InitDefaultsReport();
void InitDefaultsBug_trackerImpl();
void InitDefaultsBug_tracker();
inline void InitDefaults() {
  InitDefaultsReport();
  InitDefaultsBug_tracker();
}
}  // namespace protobuf_bugreport_2eproto
namespace tracker {
class Bug_tracker;
class Bug_trackerDefaultTypeInternal;
extern Bug_trackerDefaultTypeInternal _Bug_tracker_default_instance_;
class Report;
class ReportDefaultTypeInternal;
extern ReportDefaultTypeInternal _Report_default_instance_;
}  // namespace tracker
namespace tracker {

// ===================================================================

class Report : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tracker.Report) */ {
 public:
  Report();
  virtual ~Report();

  Report(const Report& from);

  inline Report& operator=(const Report& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Report(Report&& from) noexcept
    : Report() {
    *this = ::std::move(from);
  }

  inline Report& operator=(Report&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Report* internal_default_instance() {
    return reinterpret_cast<const Report*>(
               &_Report_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Report* other);
  friend void swap(Report& a, Report& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Report* New() const PROTOBUF_FINAL { return New(NULL); }

  Report* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Report& from);
  void MergeFrom(const Report& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Report* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string application = 1;
  void clear_application();
  static const int kApplicationFieldNumber = 1;
  const ::std::string& application() const;
  void set_application(const ::std::string& value);
  #if LANG_CXX11
  void set_application(::std::string&& value);
  #endif
  void set_application(const char* value);
  void set_application(const char* value, size_t size);
  ::std::string* mutable_application();
  ::std::string* release_application();
  void set_allocated_application(::std::string* application);

  // string time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // string information = 3;
  void clear_information();
  static const int kInformationFieldNumber = 3;
  const ::std::string& information() const;
  void set_information(const ::std::string& value);
  #if LANG_CXX11
  void set_information(::std::string&& value);
  #endif
  void set_information(const char* value);
  void set_information(const char* value, size_t size);
  ::std::string* mutable_information();
  ::std::string* release_information();
  void set_allocated_information(::std::string* information);

  // string severity = 4;
  void clear_severity();
  static const int kSeverityFieldNumber = 4;
  const ::std::string& severity() const;
  void set_severity(const ::std::string& value);
  #if LANG_CXX11
  void set_severity(::std::string&& value);
  #endif
  void set_severity(const char* value);
  void set_severity(const char* value, size_t size);
  ::std::string* mutable_severity();
  ::std::string* release_severity();
  void set_allocated_severity(::std::string* severity);

  // string status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:tracker.Report)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr application_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr information_;
  ::google::protobuf::internal::ArenaStringPtr severity_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable int _cached_size_;
  friend struct ::protobuf_bugreport_2eproto::TableStruct;
  friend void ::protobuf_bugreport_2eproto::InitDefaultsReportImpl();
};
// -------------------------------------------------------------------

class Bug_tracker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tracker.Bug_tracker) */ {
 public:
  Bug_tracker();
  virtual ~Bug_tracker();

  Bug_tracker(const Bug_tracker& from);

  inline Bug_tracker& operator=(const Bug_tracker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bug_tracker(Bug_tracker&& from) noexcept
    : Bug_tracker() {
    *this = ::std::move(from);
  }

  inline Bug_tracker& operator=(Bug_tracker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bug_tracker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bug_tracker* internal_default_instance() {
    return reinterpret_cast<const Bug_tracker*>(
               &_Bug_tracker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Bug_tracker* other);
  friend void swap(Bug_tracker& a, Bug_tracker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bug_tracker* New() const PROTOBUF_FINAL { return New(NULL); }

  Bug_tracker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bug_tracker& from);
  void MergeFrom(const Bug_tracker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bug_tracker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tracker.Report reports = 1;
  int reports_size() const;
  void clear_reports();
  static const int kReportsFieldNumber = 1;
  const ::tracker::Report& reports(int index) const;
  ::tracker::Report* mutable_reports(int index);
  ::tracker::Report* add_reports();
  ::google::protobuf::RepeatedPtrField< ::tracker::Report >*
      mutable_reports();
  const ::google::protobuf::RepeatedPtrField< ::tracker::Report >&
      reports() const;

  // @@protoc_insertion_point(class_scope:tracker.Bug_tracker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tracker::Report > reports_;
  mutable int _cached_size_;
  friend struct ::protobuf_bugreport_2eproto::TableStruct;
  friend void ::protobuf_bugreport_2eproto::InitDefaultsBug_trackerImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Report

// string application = 1;
inline void Report::clear_application() {
  application_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Report::application() const {
  // @@protoc_insertion_point(field_get:tracker.Report.application)
  return application_.GetNoArena();
}
inline void Report::set_application(const ::std::string& value) {
  
  application_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tracker.Report.application)
}
#if LANG_CXX11
inline void Report::set_application(::std::string&& value) {
  
  application_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tracker.Report.application)
}
#endif
inline void Report::set_application(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  application_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tracker.Report.application)
}
inline void Report::set_application(const char* value, size_t size) {
  
  application_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tracker.Report.application)
}
inline ::std::string* Report::mutable_application() {
  
  // @@protoc_insertion_point(field_mutable:tracker.Report.application)
  return application_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Report::release_application() {
  // @@protoc_insertion_point(field_release:tracker.Report.application)
  
  return application_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report::set_allocated_application(::std::string* application) {
  if (application != NULL) {
    
  } else {
    
  }
  application_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application);
  // @@protoc_insertion_point(field_set_allocated:tracker.Report.application)
}

// string time = 2;
inline void Report::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Report::time() const {
  // @@protoc_insertion_point(field_get:tracker.Report.time)
  return time_.GetNoArena();
}
inline void Report::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tracker.Report.time)
}
#if LANG_CXX11
inline void Report::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tracker.Report.time)
}
#endif
inline void Report::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tracker.Report.time)
}
inline void Report::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tracker.Report.time)
}
inline ::std::string* Report::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:tracker.Report.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Report::release_time() {
  // @@protoc_insertion_point(field_release:tracker.Report.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:tracker.Report.time)
}

// string information = 3;
inline void Report::clear_information() {
  information_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Report::information() const {
  // @@protoc_insertion_point(field_get:tracker.Report.information)
  return information_.GetNoArena();
}
inline void Report::set_information(const ::std::string& value) {
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tracker.Report.information)
}
#if LANG_CXX11
inline void Report::set_information(::std::string&& value) {
  
  information_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tracker.Report.information)
}
#endif
inline void Report::set_information(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tracker.Report.information)
}
inline void Report::set_information(const char* value, size_t size) {
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tracker.Report.information)
}
inline ::std::string* Report::mutable_information() {
  
  // @@protoc_insertion_point(field_mutable:tracker.Report.information)
  return information_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Report::release_information() {
  // @@protoc_insertion_point(field_release:tracker.Report.information)
  
  return information_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report::set_allocated_information(::std::string* information) {
  if (information != NULL) {
    
  } else {
    
  }
  information_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), information);
  // @@protoc_insertion_point(field_set_allocated:tracker.Report.information)
}

// string severity = 4;
inline void Report::clear_severity() {
  severity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Report::severity() const {
  // @@protoc_insertion_point(field_get:tracker.Report.severity)
  return severity_.GetNoArena();
}
inline void Report::set_severity(const ::std::string& value) {
  
  severity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tracker.Report.severity)
}
#if LANG_CXX11
inline void Report::set_severity(::std::string&& value) {
  
  severity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tracker.Report.severity)
}
#endif
inline void Report::set_severity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  severity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tracker.Report.severity)
}
inline void Report::set_severity(const char* value, size_t size) {
  
  severity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tracker.Report.severity)
}
inline ::std::string* Report::mutable_severity() {
  
  // @@protoc_insertion_point(field_mutable:tracker.Report.severity)
  return severity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Report::release_severity() {
  // @@protoc_insertion_point(field_release:tracker.Report.severity)
  
  return severity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report::set_allocated_severity(::std::string* severity) {
  if (severity != NULL) {
    
  } else {
    
  }
  severity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), severity);
  // @@protoc_insertion_point(field_set_allocated:tracker.Report.severity)
}

// string status = 5;
inline void Report::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Report::status() const {
  // @@protoc_insertion_point(field_get:tracker.Report.status)
  return status_.GetNoArena();
}
inline void Report::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tracker.Report.status)
}
#if LANG_CXX11
inline void Report::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tracker.Report.status)
}
#endif
inline void Report::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tracker.Report.status)
}
inline void Report::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tracker.Report.status)
}
inline ::std::string* Report::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tracker.Report.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Report::release_status() {
  // @@protoc_insertion_point(field_release:tracker.Report.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Report::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tracker.Report.status)
}

// -------------------------------------------------------------------

// Bug_tracker

// repeated .tracker.Report reports = 1;
inline int Bug_tracker::reports_size() const {
  return reports_.size();
}
inline void Bug_tracker::clear_reports() {
  reports_.Clear();
}
inline const ::tracker::Report& Bug_tracker::reports(int index) const {
  // @@protoc_insertion_point(field_get:tracker.Bug_tracker.reports)
  return reports_.Get(index);
}
inline ::tracker::Report* Bug_tracker::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:tracker.Bug_tracker.reports)
  return reports_.Mutable(index);
}
inline ::tracker::Report* Bug_tracker::add_reports() {
  // @@protoc_insertion_point(field_add:tracker.Bug_tracker.reports)
  return reports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tracker::Report >*
Bug_tracker::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:tracker.Bug_tracker.reports)
  return &reports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tracker::Report >&
Bug_tracker::reports() const {
  // @@protoc_insertion_point(field_list:tracker.Bug_tracker.reports)
  return reports_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bugreport_2eproto__INCLUDED
